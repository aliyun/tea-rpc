import Util;
import Credential;
import RPCUtil;

type @endpoint = string
type @regionId = string
type @protocol = string
type @userAgent = string
type @endpointRule = string
type @endpointMap = map[string]string
type @suffix = string
type @readTimeout = number
type @connectTimeout = number
type @httpProxy = string
type @httpsProxy = string
type @socks5Proxy = string
type @socks5NetWork = string
type @noProxy = string
type @network = string
type @productId = string
type @maxIdleConns = number
type @endpointType = string
type @openPlatformEndpoint = string
type @credential = Credential

model Config {
  accessKeyId?: string,
  accessKeySecret?: string,
  network?: string,
  suffix?: string,
  type?: string,
  securityToken?: string,
  endpoint?: string,
  protocol?: string,
  regionId?: string,
  productId?: string,
  userAgent?: string,
  readTimeout?: number,
  connectTimeout?: number,
  httpProxy?: string,
  httpsProxy?: string,
  noProxy?: string,
  socks5Proxy?: string,
  socks5NetWork?: string,
  maxIdleConns?: number,
  endpointType?: string,
  openPlatformEndpoint?: string
}

init(config: Config) {
  var credentialConfig : Credential.Config = null;
  if (Util.isUnset(config)) {
    config = new Config{};
    @credential = new Credential(null);
  } else {
    credentialConfig = new Credential.Config{
      accessKeyId = config.accessKeyId,
      type = config.type,
      accessKeySecret = config.accessKeySecret,
      securityToken = config.securityToken
    };
    @credential = new Credential(credentialConfig);
  } 
  @network = config.network;
  @suffix = config.suffix;
  @endpoint = config.endpoint;
  @protocol = config.protocol;
  @regionId = config.regionId;
  @userAgent = config.userAgent;
  @readTimeout = config.readTimeout;
  @connectTimeout = config.connectTimeout;
  @httpProxy = config.httpProxy;
  @httpsProxy = config.httpsProxy;
  @noProxy = config.noProxy;
  @socks5Proxy = config.socks5Proxy;
  @socks5NetWork = config.socks5NetWork;
  @maxIdleConns = config.maxIdleConns;
  @endpointType = config.endpointType;
  @openPlatformEndpoint = config.openPlatformEndpoint;
}

api doRequest(action: string, protocol: string, method: string, authType: string, query: object, body: object, runtime: Util.RuntimeOptions): object {
  __request.protocol = Util.defaultString(@protocol, protocol);
  __request.method = method;
  __request.pathname = '/';
  __request.query = RPCUtil.query({
    Action = action,
    Format = 'json',
    Timestamp = RPCUtil.getTimestamp(),
    Version = '2019-12-30',
    SignatureNonce = Util.getNonce(),
    ...query
  });

  if (!Util.isUnset(body)) {
    var tmp = Util.anyifyMapValue(RPCUtil.query(body));
    __request.body = Util.toFormString(tmp);
  }
  // endpoint is setted in product client
  __request.headers = {
    host = @endpoint,
    user-agent = getUserAgent()
  };

  if (!Util.equalString(authType, 'Anonymous')) {
    var accessKeyId = getAccessKeyId();
    var accessKeySecret = getAccessKeySecret();
    var securityToken = getSecurityToken();

    if (!Util.empty(securityToken)) {
      __request.query.SecurityToken = securityToken;
    }
    __request.query.SignatureMethod = 'HMAC-SHA1';
    __request.query.SignatureVersion = '1.0';
    __request.query.AccessKeyId = accessKeyId;
    __request.query.Signature = RPCUtil.getSignature(__request, accessKeySecret);
  }
} returns {
  var obj = Util.readAsJSON(__response.body);
  var res = Util.assertAsMap(obj);

  if (Util.is4xx(__response.statusCode) || Util.is5xx(__response.statusCode)) {
    throw {
      message = res.Message,
      data = res,
      code = res.Code
    };
  }
  return res;
} runtime {
  timeouted = 'retry',
  readTimeout = Util.defaultNumber(runtime.readTimeout, @readTimeout),
  connectTimeout = Util.defaultNumber(runtime.connectTimeout, @connectTimeout),
  httpProxy = Util.defaultString(runtime.httpProxy, @httpProxy),
  httpsProxy = Util.defaultString(runtime.httpsProxy, @httpsProxy),
  noProxy = Util.defaultString(runtime.noProxy, @noProxy),
  maxIdleConns = Util.defaultNumber(runtime.maxIdleConns, @maxIdleConns),
  retry = {
    retryable = runtime.autoretry,
    maxAttempts = Util.defaultNumber(runtime.maxAttempts, 3)
  },
  backoff = {
    policy = Util.defaultString(runtime.backoffPolicy, 'no'),
    period = Util.defaultNumber(runtime.backoffPeriod, 1)
  },
  ignoreSSL = runtime.ignoreSSL
}

function getUserAgent(): string {
  var userAgent = Util.getUserAgent(@userAgent);
  return userAgent;
}

async function getAccessKeyId(): string {
  if (Util.isUnset(@credential)) {
    return '';
  }
  var accessKeyId = @credential.getAccessKeyId();
  return accessKeyId;
}

async function getAccessKeySecret(): string {
  if (Util.isUnset(@credential)) {
    return '';
  }
  var secret = @credential.getAccessKeySecret();
  return secret;
}

async function getSecurityToken(): string {
  if (Util.isUnset(@credential)) {
    return '';
  }
  var token = @credential.getSecurityToken();
  return token;
}

function checkConfig(config: Config)throws : void {
  if (Util.empty(@endpointRule) && Util.empty(config.endpoint)) {
    throw {
      name = 'ParameterMissing',
      message = '\'config.endpoint\' can not be empty'
    };
  }
}

